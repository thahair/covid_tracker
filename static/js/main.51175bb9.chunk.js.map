{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","undefined","cards","confirmed","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","url","fetchData","countryName","a","dynamicURL","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","response","tempCountries","countries","countryNames","country","i","push","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchCountrieNames","setFetchCountriesNames","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","index","key","App","state","fetchedData","setState","this","heading","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.51175bb9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__xPXxi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__e55pM\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = (data) => {\r\n  //console.log(data);\r\n  if (data.cards.confirmed == undefined) {\r\n    return \"Loading...\";\r\n  } else {\r\n    return (\r\n      <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={3}\r\n            component={Card}\r\n            className={cx(styles.card, styles.infected)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Infected\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={data.cards.confirmed.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(data.cards.lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of active cases of COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={3}\r\n            component={Card}\r\n            className={cx(styles.card, styles.recovered)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Recovered\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={data.cards.recovered.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(data.cards.lastUpdate).toDateString()}\r\n              </Typography>\r\n\r\n              <Typography variant=\"body2\">\r\n                Number of recoveries from COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={3}\r\n            component={Card}\r\n            className={cx(styles.card, styles.deaths)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Deaths\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={data.cards.deaths.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(data.cards.lastUpdate).toDateString()}\r\n              </Typography>\r\n\r\n              <Typography variant=\"body2\">\r\n                Number of deaths caused by COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\"; //axios is used to make api requests\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (countryName) => {\r\n  let dynamicURL = url;\r\n\r\n  if (countryName) {\r\n    dynamicURL = `${url}/countries/${countryName}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(dynamicURL);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const response = await axios.get(`${url}/countries`);\r\n    let tempCountries = response.data.countries;\r\n    let countryNames = [];\r\n    tempCountries.map((country, i) => countryNames.push(country.name));\r\n    return countryNames;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    //console.log(dailyData);\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = data.confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [\r\n              data.confirmed.value,\r\n              data.recovered.value,\r\n              data.deaths.value,\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchCountrieNames, setFetchCountriesNames] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchCountriesNames(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [setFetchCountriesNames]);\r\n\r\n  console.log(fetchCountrieNames);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => {\r\n          handleCountryChange(e.target.value);\r\n        }}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchCountrieNames.length\r\n          ? fetchCountrieNames.map((countryName, index) => (\r\n              <option key={index} value={countryName}>\r\n                {countryName}\r\n              </option>\r\n            ))\r\n          : null}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async (countryName) => {\r\n    const fetchedData = await fetchData(countryName);\r\n    this.setState({ data: fetchedData, country: countryName });\r\n  };\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n        <Grid item xs={12} md={12}>\r\n          <Typography className={styles.heading} variant=\"h4\">\r\n            Learn in Lockdown\r\n          </Typography>\r\n        </Grid>\r\n        <Cards cards={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1ItdO\",\"card\":\"Cards_card__1P_tG\",\"infected\":\"Cards_infected__3n9Zx\",\"recovered\":\"Cards_recovered__1dyaE\",\"deaths\":\"Cards_deaths__24Xof\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__wfkXh\",\"heading\":\"App_heading__3i3OR\"};"],"sourceRoot":""}